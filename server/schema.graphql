# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Attribute {
  attributeType: String
  createdAt: DateTime!
  id: String!
  name: String
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
  value: String
}

input AttributeCreateInput {
  attributeType: String
  name: String
  products: ProductCreateNestedManyWithoutAttributesInput
  value: String
}

input AttributeOrderByInput {
  attributeType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input AttributeUpdateInput {
  attributeType: String
  name: String
  products: ProductUpdateManyWithoutAttributesInput
  value: String
}

input AttributeWhereInput {
  attributeType: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  products: ProductListRelationFilter
  value: StringNullableFilter
}

input AttributeWhereUniqueInput {
  id: String!
}

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

type Brand {
  brandname: String!
  createdAt: DateTime!
  id: String!
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
}

input BrandCreateInput {
  brandname: String!
  products: ProductCreateNestedManyWithoutBrandsInput
}

input BrandOrderByInput {
  brandname: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input BrandUpdateInput {
  brandname: String
  products: ProductUpdateManyWithoutBrandsInput
}

input BrandWhereInput {
  brandname: StringFilter
  id: StringFilter
  products: ProductListRelationFilter
}

input BrandWhereUniqueInput {
  id: String!
}

type Cart {
  active: Boolean
  cartitems(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  createdAt: DateTime!
  id: String!
  totalItem: Float
  totalprice: Float
  updatedAt: DateTime!
  userid: String
}

input CartCreateInput {
  active: Boolean
  cartitems: CartItemCreateNestedManyWithoutCartsInput
  totalItem: Float
  totalprice: Float
  userid: String
}

type CartItem {
  cartid: Cart
  createdAt: DateTime!
  id: String!
  productid: Product
  productprice: Float
  quantity: Float
  updatedAt: DateTime!
  userid: String
}

input CartItemCreateInput {
  cartid: CartWhereUniqueInput
  productid: ProductWhereUniqueInput
  productprice: Float
  quantity: Float
  userid: String
}

input CartItemCreateNestedManyWithoutCartsInput {
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateNestedManyWithoutProductsInput {
  connect: [CartItemWhereUniqueInput!]
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByInput {
  cartidId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productidId: SortOrder
  productprice: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
  userid: SortOrder
}

input CartItemUpdateInput {
  cartid: CartWhereUniqueInput
  productid: ProductWhereUniqueInput
  productprice: Float
  quantity: Float
  userid: String
}

input CartItemUpdateManyWithoutCartsInput {
  connect: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
}

input CartItemUpdateManyWithoutProductsInput {
  connect: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
}

input CartItemWhereInput {
  cartid: CartWhereUniqueInput
  id: StringFilter
  productid: ProductWhereUniqueInput
  productprice: FloatNullableFilter
  quantity: IntNullableFilter
  userid: StringNullableFilter
}

input CartItemWhereUniqueInput {
  id: String!
}

input CartOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  id: SortOrder
  totalItem: SortOrder
  totalprice: SortOrder
  updatedAt: SortOrder
  userid: SortOrder
}

input CartUpdateInput {
  active: Boolean
  cartitems: CartItemUpdateManyWithoutCartsInput
  totalItem: Float
  totalprice: Float
  userid: String
}

input CartWhereInput {
  active: BooleanNullableFilter
  cartitems: CartItemListRelationFilter
  id: StringFilter
  totalItem: IntNullableFilter
  totalprice: FloatNullableFilter
  userid: StringNullableFilter
}

input CartWhereUniqueInput {
  id: String!
}

type Category {
  categoryname: String
  createdAt: DateTime!
  id: String!
  parentid: String
  updatedAt: DateTime!
}

input CategoryCreateInput {
  categoryname: String
  parentid: String
}

input CategoryOrderByInput {
  categoryname: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentid: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  categoryname: String
  parentid: String
}

input CategoryWhereInput {
  categoryname: StringNullableFilter
  id: StringFilter
  parentid: StringNullableFilter
}

input CategoryWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
  createBrand(data: BrandCreateInput!): Brand!
  createCart(data: CartCreateInput!): Cart!
  createCartItem(data: CartItemCreateInput!): CartItem!
  createCategory(data: CategoryCreateInput!): Category!
  createOrder(data: OrderCreateInput!): Order!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute!
  deleteBrand(where: BrandWhereUniqueInput!): Brand!
  deleteCart(where: CartWhereUniqueInput!): Cart!
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  deleteOrder(where: OrderWhereUniqueInput!): Order!
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Order {
  createdAt: DateTime!
  id: String!
  orderItems(orderBy: [OrderItemOrderByInput!], skip: Float, take: Float, where: OrderItemWhereInput): [OrderItem!]!
  totalprice: Float
  updatedAt: DateTime!
  userid: User
}

input OrderCreateInput {
  orderItems: OrderItemCreateNestedManyWithoutOrdersInput
  totalprice: Float
  userid: UserWhereUniqueInput
}

input OrderCreateNestedManyWithoutUsersInput {
  connect: [OrderWhereUniqueInput!]
}

type OrderItem {
  createdAt: DateTime!
  id: String!
  orderid: Order
  productid: Product
  productprice: Float
  quantity: Float
  updatedAt: DateTime!
}

input OrderItemCreateInput {
  orderid: OrderWhereUniqueInput
  productid: ProductWhereUniqueInput
  productprice: Float
  quantity: Float
}

input OrderItemCreateNestedManyWithoutOrdersInput {
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateNestedManyWithoutProductsInput {
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemListRelationFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

input OrderItemOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  orderidId: SortOrder
  productidId: SortOrder
  productprice: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
}

input OrderItemUpdateInput {
  orderid: OrderWhereUniqueInput
  productid: ProductWhereUniqueInput
  productprice: Float
  quantity: Float
}

input OrderItemUpdateManyWithoutOrdersInput {
  connect: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
}

input OrderItemUpdateManyWithoutProductsInput {
  connect: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
}

input OrderItemWhereInput {
  id: StringFilter
  orderid: OrderWhereUniqueInput
  productid: ProductWhereUniqueInput
  productprice: FloatNullableFilter
  quantity: IntNullableFilter
}

input OrderItemWhereUniqueInput {
  id: String!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  totalprice: SortOrder
  updatedAt: SortOrder
  useridId: SortOrder
}

input OrderUpdateInput {
  orderItems: OrderItemUpdateManyWithoutOrdersInput
  totalprice: Float
  userid: UserWhereUniqueInput
}

input OrderUpdateManyWithoutUsersInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderWhereInput {
  id: StringFilter
  orderItems: OrderItemListRelationFilter
  totalprice: FloatNullableFilter
  userid: UserWhereUniqueInput
}

input OrderWhereUniqueInput {
  id: String!
}

type Product {
  attributeId: Attribute
  brandid: Brand
  carts(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  categoryid: JSONObject!
  createdAt: DateTime!
  id: String!
  image: String!
  orderItems(orderBy: [OrderItemOrderByInput!], skip: Float, take: Float, where: OrderItemWhereInput): [OrderItem!]!
  price: Float!
  productname: String!
  sku: String
  updatedAt: DateTime!
}

input ProductCreateInput {
  attributeId: AttributeWhereUniqueInput
  brandid: BrandWhereUniqueInput
  carts: CartItemCreateNestedManyWithoutProductsInput
  categoryid: JSONObject!
  image: String!
  orderItems: OrderItemCreateNestedManyWithoutProductsInput
  price: Float!
  productname: String!
  sku: String
}

input ProductCreateNestedManyWithoutAttributesInput {
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateNestedManyWithoutBrandsInput {
  connect: [ProductWhereUniqueInput!]
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  attributeIdId: SortOrder
  brandidId: SortOrder
  categoryid: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  price: SortOrder
  productname: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

input ProductUpdateInput {
  attributeId: AttributeWhereUniqueInput
  brandid: BrandWhereUniqueInput
  carts: CartItemUpdateManyWithoutProductsInput
  categoryid: JSONObject
  image: String
  orderItems: OrderItemUpdateManyWithoutProductsInput
  price: Float
  productname: String
  sku: String
}

input ProductUpdateManyWithoutAttributesInput {
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
}

input ProductUpdateManyWithoutBrandsInput {
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
}

input ProductWhereInput {
  attributeId: AttributeWhereUniqueInput
  brandid: BrandWhereUniqueInput
  carts: CartItemListRelationFilter
  categoryid: JsonFilter
  id: StringFilter
  image: StringFilter
  orderItems: OrderItemListRelationFilter
  price: FloatFilter
  productname: StringFilter
  sku: StringNullableFilter
}

input ProductWhereUniqueInput {
  id: String!
}

type Query {
  _attributesMeta(orderBy: [AttributeOrderByInput!], skip: Float, take: Float, where: AttributeWhereInput): MetaQueryPayload!
  _brandsMeta(orderBy: [BrandOrderByInput!], skip: Float, take: Float, where: BrandWhereInput): MetaQueryPayload!
  _cartItemsMeta(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): MetaQueryPayload!
  _cartsMeta(orderBy: [CartOrderByInput!], skip: Float, take: Float, where: CartWhereInput): MetaQueryPayload!
  _categoriesMeta(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): MetaQueryPayload!
  _orderItemsMeta(orderBy: [OrderItemOrderByInput!], skip: Float, take: Float, where: OrderItemWhereInput): MetaQueryPayload!
  _ordersMeta(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): MetaQueryPayload!
  _productsMeta(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributes(orderBy: [AttributeOrderByInput!], skip: Float, take: Float, where: AttributeWhereInput): [Attribute!]!
  brand(where: BrandWhereUniqueInput!): Brand
  brands(orderBy: [BrandOrderByInput!], skip: Float, take: Float, where: BrandWhereInput): [Brand!]!
  cart(where: CartWhereUniqueInput!): Cart
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(orderBy: [CartItemOrderByInput!], skip: Float, take: Float, where: CartItemWhereInput): [CartItem!]!
  carts(orderBy: [CartOrderByInput!], skip: Float, take: Float, where: CartWhereInput): [Cart!]!
  categories(orderBy: [CategoryOrderByInput!], skip: Float, take: Float, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(orderBy: [OrderItemOrderByInput!], skip: Float, take: Float, where: OrderItemWhereInput): [OrderItem!]!
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  address: String
  createdAt: DateTime!
  email: String!
  firstName: String
  id: String!
  lastName: String
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  address: String
  email: String!
  firstName: String
  lastName: String
  orders: OrderCreateNestedManyWithoutUsersInput
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  address: String
  email: String
  firstName: String
  lastName: String
  orders: OrderUpdateManyWithoutUsersInput
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  address: StringNullableFilter
  email: StringFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
